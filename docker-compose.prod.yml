version: '3.5'

networks:
  prod:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.1.0.0/24

services:
  nginx:
    hostname: nginx
    build:
      context: ./docker/nginx
      dockerfile: ./prod.Dockerfile
    networks:
      prod:
        ipv4_address: 10.1.0.10
    ports:
      - 80:80
      - 443:443
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    volumes:
      - ./docker/nginx/prod.nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/prod.conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/common.conf.d:/etc/nginx/common.conf.d:ro
      - ./docker/.volumes/letsencrypt:/etc/letsencrypt
      - ./docker/.volumes/certbot-webroot:/var/www/certbot:ro
    restart: always

  database:
    hostname: database
    build:
      context: ./docker/database
      dockerfile: ./prod.Dockerfile
    env_file: ./docker/database/.env.production.local
    networks:
      prod:
        ipv4_address: 10.1.0.20
    ports:
      - ${DATABASE_PORT:-9902}:5432
    volumes:
      - ./docker/.volumes/postgres/toolbox:/var/lib/postgresql/data/toolbox
    restart: unless-stopped

  redis:
    hostname: redis
    build:
      context: ./docker/redis
      dockerfile: ./dev.Dockerfile
    networks:
      prod:
        ipv4_address: 10.1.0.30
    ports:
      - 9903:6379
    volumes:
      - ./docker/.volumes/redis/data:/data
    restart: unless-stopped

  letsencrypt:
    hostname: letsencrypt
    build:
      context: ./docker/letsencrypt
      dockerfile: ./prod.Dockerfile
    env_file: ./docker/letsencrypt/.env.production.local
    networks:
      prod:
        ipv4_address: 10.1.0.99
    volumes:
      - ./docker/.volumes/letsencrypt:/etc/letsencrypt
      - ./docker/.volumes/certbot-webroot:/certbot-webroot
    restart: 'no'

  backend:
    image: muniftanjim/toolbox-backend:latest
    build:
      context: ./
      dockerfile: ./apps/backend/prod.Dockerfile
    networks:
      prod:
        ipv4_address: 10.1.0.110
    ports:
      - 9000:9000
    restart: always
    environment:
      - NODE_ENV=production
    volumes:
      - ./apps/backend/.env.production:/toolbox/apps/backend/.env:ro
      - ./apps/backend/.env.production.local:/toolbox/apps/backend/.env.local:ro

  frontend:
    image: muniftanjim/toolbox-frontend:latest
    build:
      context: ./
      dockerfile: ./apps/frontend/prod.Dockerfile
    networks:
      prod:
        ipv4_address: 10.1.0.120
    ports:
      - 3000:3000
    restart: always
    environment:
      - NODE_ENV=production
    volumes:
      - ./apps/frontend/.env.production:/app/frontend/.env:ro
      - ./apps/frontend/.env.production.local:/app/frontend/.env.local:ro
      - ./apps/frontend/.next:/toolbox/apps/frontend/.next
